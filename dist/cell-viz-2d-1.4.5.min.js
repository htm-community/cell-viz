/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/HtmViz2d.js":
/*!*************************!*\
  !*** ./src/HtmViz2d.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n# ----------------------------------------------------------------------\n# Copyright (C) 2016, Numenta, Inc.  Unless you have an agreement\n# with Numenta, Inc., for a separate license for this software code, the\n# following terms and conditions apply:\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU Affero Public License version 3 as\n# published by the Free Software Foundation.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the GNU Affero Public License for more details.\n#\n# You should have received a copy of the GNU Affero Public License\n# along with this program.  If not, see http://www.gnu.org/licenses.\n#\n# http://numenta.org/licenses/\n# ----------------------------------------------------------------------\n*/\n\nwindow.SdrUtils = __webpack_require__(/*! ./SdrUtils */ \"./src/SdrUtils.js\");\nwindow.SdrDrawing = __webpack_require__(/*! ./SdrDrawing */ \"./src/SdrDrawing.js\");\n\n//# sourceURL=webpack:///./src/HtmViz2d.js?");

/***/ }),

/***/ "./src/SdrDrawing.js":
/*!***************************!*\
  !*** ./src/SdrDrawing.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* From http://stackoverflow.com/questions/7128675/from-green-to-red-color-depend-on-percentage */\nfunction getGreenToRed(percent) {\n    var r, g;\n    percent = 100 - percent;\n    r = percent < 50 ? 255 : Math.floor(255 - (percent * 2 - 100) * 255 / 100);\n    g = percent > 50 ? 255 : Math.floor(percent * 2 * 255 / 100);\n    return rgbToHex(r, g, 0);\n}\n\n/* From http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb */\nfunction rgbToHex(r, g, b) {\n    return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\n}\n\nlet defaultOpts = {\n    width: 400,\n    height: 400,\n    threshold: undefined,\n    gradientFill: false,\n    onColor: 'skyblue',\n    offColor: 'white',\n    connectionColor: 'royalblue'\n};\n\nfunction SdrDrawing(permanences, element) {\n    this.permanences = permanences;\n    this.el = element;\n}\n\nSdrDrawing.prototype._snapDrawOptionsToBox = function (opts) {\n    let w = opts.width;\n    let h = opts.height;\n    let area = w * h;\n    let numBoxes = this.permanences.length;\n    let cellSize = Math.floor(Math.sqrt(area / numBoxes) * .95);\n    let repeatX = Math.floor(w / cellSize);\n    opts.cellSize = cellSize;\n    opts.rowLength = repeatX;\n    return opts;\n};\n\nSdrDrawing.prototype.draw = function (options) {\n    let opts = this._snapDrawOptionsToBox(Object.assign(defaultOpts, options));\n    let threshold = opts.threshold;\n    let perms = this.permanences;\n    let svg = d3.select('#' + this.el).attr('width', opts.width).attr('height', opts.height);\n\n    svg.html('');\n\n    function renderCell(r, c) {\n        r.attr('fill', d => {\n            if (d === null) return opts.offColor;\n            if (d > 0) {\n                if (opts.gradientFill) return '#' + getGreenToRed(d * 100);else return opts.onColor;\n            }\n            return opts.offColor;\n        }).attr('stroke', 'darkgrey').attr('stroke-width', 0.5).attr('fill-opacity', 1).attr('x', function (d, i) {\n            let offset = i % opts.rowLength;\n            return offset * opts.cellSize;\n        }).attr('y', function (d, i) {\n            let offset = Math.floor(i / opts.rowLength);\n            return offset * opts.cellSize;\n        }).attr('width', opts.cellSize).attr('height', opts.cellSize);\n        c.attr('fill', (d, i) => {\n            // If no data, means it is empty or zero bit, no circles.\n            if (d === null) return 'none';\n            // If there is a threshold defined, we'll assume the perms are\n            // not binary, but are permanences values, and will render\n            // circles.\n            if (threshold !== undefined) {\n                if (d > threshold) return opts.connectionColor;\n            }\n            return 'none';\n        }).attr('fill-opacity', 1).attr('cx', function (d, i) {\n            let offset = i % opts.rowLength;\n            return offset * opts.cellSize + opts.cellSize / 2;\n        }).attr('cy', function (d, i) {\n            let offset = Math.floor(i / opts.rowLength);\n            return offset * opts.cellSize + opts.cellSize / 2;\n        }).attr('r', opts.cellSize / 4);\n    }\n\n    // Update\n    let rects = svg.selectAll('rect').data(perms);\n    let circs = svg.selectAll('circles').data(perms);\n    renderCell(rects, circs);\n\n    // Enter\n    let newRects = rects.enter().append('rect');\n    let newCircs = circs.enter().append('circle');\n    renderCell(newRects, newCircs);\n\n    // Exit\n    rects.exit().remove();\n    circs.exit().remove();\n};\n\nmodule.exports = SdrDrawing;\n\n//# sourceURL=webpack:///./src/SdrDrawing.js?");

/***/ }),

/***/ "./src/SdrUtils.js":
/*!*************************!*\
  !*** ./src/SdrUtils.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("let DEFAULT_SPARSITY = 0.02;\n\n/***** Private TOOLS *****/\n\n// a tool to loop x times\nfunction times(count, fn) {\n    for (let i = 0; i < count; i++) {\n        fn(i);\n    }\n}\n\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction flip(bit) {\n    if (bit === 0) return 1;\n    return 0;\n}\n\nfunction overflowSafeUniqueness(n, w) {\n    let bigN = math.bignumber(n);\n    let bigW = math.bignumber(w);\n\n    let nf = math.factorial(bigN);\n    let wf = math.factorial(bigW);\n    let nwf = math.factorial(math.subtract(bigN, bigW));\n\n    return math.divide(nf, math.multiply(wf, nwf));\n}\n\nfunction closeEnoughSparsity(a, b) {\n    let diff = Math.abs(a - b);\n    // Close enough if within one percent.\n    return diff <= 0.01;\n}\n\n/***** PUBLIC functions start here *****/\n\n/*********\n CREATE\n*********/\n\nfunction getRandom(n, w) {\n    let out = [];\n    let randomIndex;\n    let sparsity;\n\n    if (w === undefined) {\n        w = n * DEFAULT_SPARSITY;\n    }\n\n    sparsity = w / n;\n\n    // Fill array with zeros.\n    while (out.length < n) {\n        out.push(0);\n    }\n    // If not sparse enough, randomly flip 0 bits to 1.\n    while (population(out) / n < sparsity) {\n        // Make a random 0 bit into a 1.\n        randomIndex = getRandomInt(0, n);\n        if (out[randomIndex] === 0) {\n            out[randomIndex] = 1;\n        }\n    }\n\n    return out;\n}\n\nfunction getEmpty(n) {\n    let out = [];\n\n    times(n, function () {\n        out.push(0);\n    });\n    return out;\n}\n\n/*********\n INSPECT\n *********/\n\nfunction getActiveBits(sdr) {\n    let active = [];\n    sdr.forEach((bit, i) => {\n        if (bit === 1) active.push(i);\n    });\n    return active;\n}\n\nfunction getInactiveBits(sdr) {\n    let inactive = [];\n    sdr.forEach((bit, i) => {\n        if (bit === 0) inactive.push(i);\n    });\n    return inactive;\n}\n\nfunction population(sdr) {\n    return sdr.reduce(function (sum, n) {\n        return sum + n;\n    }, 0);\n}\n\nfunction sparsity(sdr) {\n    let onBits = sdr.filter(bit => {\n        return bit === 1;\n    }).length;\n    return onBits / sdr.length;\n}\nlet density = sparsity;\n\n/*********\n UPDATE\n *********/\n\n// Flips every bit.\nfunction invert(sdr) {\n    return sdr.map(bit => {\n        if (bit === 0) return 1;\n        return 0;\n    });\n}\n\nfunction adjustTo(sdr, targetDensity) {\n    let out = sdr.slice();\n\n    let n = sdr.length;\n    let currentDensity = density(sdr);\n    let diff = targetDensity - currentDensity;\n    let diffBits = Math.abs(parseInt(diff * n));\n    let onBits = getActiveBits(sdr);\n    let offBits = getInactiveBits(sdr);\n\n    // adjust by turning bits on\n    let bitType = 1;\n    let targetIndices = offBits;\n    // adjust by turning bits off\n    if (targetDensity < currentDensity) {\n        bitType = 0;\n        targetIndices = onBits;\n    }\n\n    for (let i = 0; i < diffBits; i++) {\n        let toFlip = targetIndices.splice(getRandomInt(0, targetIndices.length - 1), 1)[0];\n        out[toFlip] = bitType;\n    }\n\n    return out;\n}\n\n// Adds a percent noise by turning on X percent of the off bits and\n// turning off X percent of the on bits.\nfunction addNoise(sdr, percentNoise) {\n    // The noiseLevel will be the number of total bits to flip.\n    let noiseLevel = Math.floor(population(sdr) * percentNoise);\n    return this.addBitNoise(sdr, noiseLevel);\n}\n\nfunction addBitNoise(sdr, noisyBits) {\n    let noisy = [];\n    let activeBits = getActiveBits(sdr);\n    let inactiveBits = getInactiveBits(sdr);\n    let toFlip = [];\n    // Populate the indices of the bits we want to flip with noise.\n    times(noisyBits, function () {\n        toFlip.push(activeBits.splice(Math.random(activeBits.length - 1), 1)[0]);\n        toFlip.push(inactiveBits.splice(Math.random(inactiveBits.length - 1), 1)[0]);\n    });\n    // Flip them bits into a new array output.\n    sdr.forEach((bit, i) => {\n        let newBit = bit;\n        if (toFlip.indexOf(i) >= 0) {\n            newBit = flip(bit);\n        }\n        noisy.push(newBit);\n    });\n    return noisy;\n}\n\nmodule.exports = {\n    getRandom: getRandom,\n    getEmpty: getEmpty,\n    getActiveBits: getActiveBits,\n    getInactiveBits: getInactiveBits,\n    population: population,\n    sparsity: sparsity,\n    density: density,\n    invert: invert,\n    addNoise: addNoise,\n    addBitNoise: addBitNoise,\n    adjustTo: adjustTo\n};\n\n//# sourceURL=webpack:///./src/SdrUtils.js?");

/***/ }),

/***/ 0:
/*!*********************************************************************!*\
  !*** multi ./src/SdrUtils.js ./src/SdrDrawing.js ./src/HtmViz2d.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./src/SdrUtils.js */\"./src/SdrUtils.js\");\n__webpack_require__(/*! ./src/SdrDrawing.js */\"./src/SdrDrawing.js\");\nmodule.exports = __webpack_require__(/*! ./src/HtmViz2d.js */\"./src/HtmViz2d.js\");\n\n\n//# sourceURL=webpack:///multi_./src/SdrUtils.js_./src/SdrDrawing.js_./src/HtmViz2d.js?");

/***/ })

/******/ });